Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3

Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
 

Follow-up: Could you solve the problem in linear time and in O(1) space?

Brute Force

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n = nums.size();
        for(int i=0;i<n;i++){
            int count = 0;
            for(int j=0;j<n;j++){
                if(nums[i]==nums[j])
                    count++;
            }
            if(count>n/2) return nums[i];
        }
        return -1;
    }
};

Better Soltuion

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n = nums.size();
        unordered_map<int,int> mp;
        for(int i=0;i<n;i++){
            mp[nums[i]]++;
        }
        for(auto it:mp){
            if(it.second>n/2)
                return it.first;
        }
        return -1;
    }
};

Optimal Solution

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int count = 0;
        int element;
        for(int i=0;i<nums.size();i++){
            if(count==0)
                element = nums[i];
            if(nums[i]==element)
                count++;
            else
                count--;
        }
        return element;
    }
};
