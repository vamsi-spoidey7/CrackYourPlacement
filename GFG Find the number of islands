class Solution {
  public:
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        // Code here
        vector<vector<int>> vis(grid.size(),vector<int>(grid[0].size(),0));
        int count = 0;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[i].size();j++){
                if(vis[i][j]==0 && grid[i][j]=='1'){
                    count++;
                    bfs(i,j,grid,vis);
                }
            }
        }
        return count;
    }
    void bfs(int i,int j,vector<vector<char>>& grid,vector<vector<int>> &vis){
        vis[i][j]=1;
        queue<pair<int,int>> q;
        q.push({i,j});
        while(!q.empty()){
            int x = q.front().first;
            int y = q.front().second;
            q.pop();
            for(int row=-1;row<=1;row++){
                for(int col=-1;col<=1;col++){
                    int nrow = x + row;
                    int ncol = y + col;
                    if(nrow>=0 && nrow<grid.size() && ncol>=0 && ncol<grid[0].size() && grid[nrow][ncol]=='1' && vis[nrow][ncol]==0){
                        q.push({nrow,ncol});
                        vis[nrow][ncol] = 1;
                    }
                }
            }
        }
    }
};
