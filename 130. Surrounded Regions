class Solution {
public:
    void bfs(int i,int j,vector<vector<char>> &ans,vector<vector<char>> &board,vector<vector<int>> &vis){
        int n = board.size();
        int m = board[0].size();
        vis[i][j] = 1;
        ans[i][j] = 'O';
        queue<pair<int,int>> q;
        q.push({i,j});
        int delx[] = {-1,0,1,0};
        int dely[] = {0,1,0,-1};
        while(!q.empty()){
            int x = q.front().first;
            int y = q.front().second;
            q.pop();
            for(int k=0;k<4;k++){
                int nx = x + delx[k];
                int ny = y + dely[k];
                if(nx>=0 && nx<n && ny>=0 && ny<m && vis[nx][ny]==0 && board[nx][ny]=='O'){
                    vis[nx][ny] = 1;
                    q.push({nx,ny});
                    ans[nx][ny] = 'O';
                }
            }
        }
    }
    void solve(vector<vector<char>>& board) {
        int n = board.size();
        int m = board[0].size();
        vector<vector<char>> ans(n,vector<char>(m,'X'));
        vector<vector<int>> vis(n,vector<int>(m,0));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(i==0 || j==0 || i==n-1 || j==m-1){
                    if(board[i][j]=='O' && vis[i][j]==0){
                        bfs(i,j,ans,board,vis);
                    }
                }
            }
        }
        board = ans;
    }
};
